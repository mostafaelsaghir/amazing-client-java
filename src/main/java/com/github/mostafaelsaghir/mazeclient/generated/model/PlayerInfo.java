/*
 * A-maze-ing API
 * This document describes the API of the A-maze-ing evening server.    This API consists of three different endpoints, which are detailed below.   - To register yourself as a player use the Player endpoint.   - To get information about the available mazes and enter a specific maze use the Mazes endpoint.   - To navigate a maze use the Maze endpoint.
 *
 * OpenAPI spec version: v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.github.mostafaelsaghir.mazeclient.generated.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import lombok.Data;
import lombok.Setter;

import java.util.Objects;

/**
 * The data structure that represents information related to a player.
 */
@Setter
@ApiModel(description = "The data structure that represents information related to a player.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-08-12T19:03:45.973+02:00")
public class PlayerInfo {
  @JsonProperty("playerId")
  private String playerId = null;

  @JsonProperty("name")
  private String name = null;

  @JsonProperty("isInMaze")
  private Boolean isInMaze = null;

  @JsonProperty("maze")
  private String maze = null;

  @JsonProperty("hasFoundEasterEgg")
  private Boolean hasFoundEasterEgg = null;

  @JsonProperty("mazeScoreInHand")
  private Integer mazeScoreInHand = null;

  @JsonProperty("mazeScoreInBag")
  private Integer mazeScoreInBag = null;

  @JsonProperty("playerScore")
  private Integer playerScore = null;

   /**
   * The public unique identifier of a player.
   * @return playerId
  **/
  @ApiModelProperty(value = "The public unique identifier of a player.")
  public String getPlayerId() {
    return playerId;
  }

   /**
   * The name a player has chosen to represent her.
   * @return name
  **/
  @ApiModelProperty(value = "The name a player has chosen to represent her.")
  public String getName() {
    return name;
  }

   /**
   * An indication of whether a player is currently playing a maze or not.
   * @return isInMaze
  **/
  @ApiModelProperty(value = "An indication of whether a player is currently playing a maze or not.")
  public Boolean isIsInMaze() {
    return isInMaze;
  }

   /**
   * The name of the maze the player is currently playing. Might be null if player  is not currently playing a maze.
   * @return maze
  **/
  @ApiModelProperty(value = "The name of the maze the player is currently playing. Might be null if player  is not currently playing a maze.")
  public String getMaze() {
    return maze;
  }

   /**
   * Wink wink.
   * @return hasFoundEasterEgg
  **/
  @ApiModelProperty(value = "Wink wink.")
  public Boolean isHasFoundEasterEgg() {
    return hasFoundEasterEgg;
  }

   /**
   * How much score the player has in her hand. Only available if player is playing a maze.
   * @return mazeScoreInHand
  **/
  @ApiModelProperty(value = "How much score the player has in her hand. Only available if player is playing a maze.")
  public Integer getMazeScoreInHand() {
    return mazeScoreInHand;
  }

   /**
   * How much score the player has in her bag. Only available if player is playing a maze.
   * @return mazeScoreInBag
  **/
  @ApiModelProperty(value = "How much score the player has in her bag. Only available if player is playing a maze.")
  public Integer getMazeScoreInBag() {
    return mazeScoreInBag;
  }

   /**
   * The accumulated score across all played mazes.
   * @return playerScore
  **/
  @ApiModelProperty(value = "The accumulated score across all played mazes.")
  public Integer getPlayerScore() {
    return playerScore;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlayerInfo playerInfo = (PlayerInfo) o;
    return Objects.equals(this.playerId, playerInfo.playerId) &&
        Objects.equals(this.name, playerInfo.name) &&
        Objects.equals(this.isInMaze, playerInfo.isInMaze) &&
        Objects.equals(this.maze, playerInfo.maze) &&
        Objects.equals(this.hasFoundEasterEgg, playerInfo.hasFoundEasterEgg) &&
        Objects.equals(this.mazeScoreInHand, playerInfo.mazeScoreInHand) &&
        Objects.equals(this.mazeScoreInBag, playerInfo.mazeScoreInBag) &&
        Objects.equals(this.playerScore, playerInfo.playerScore);
  }

  @Override
  public int hashCode() {
    return Objects.hash(playerId, name, isInMaze, maze, hasFoundEasterEgg, mazeScoreInHand, mazeScoreInBag, playerScore);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlayerInfo {\n");

    sb.append("    playerId: ").append(toIndentedString(playerId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    isInMaze: ").append(toIndentedString(isInMaze)).append("\n");
    sb.append("    maze: ").append(toIndentedString(maze)).append("\n");
    sb.append("    hasFoundEasterEgg: ").append(toIndentedString(hasFoundEasterEgg)).append("\n");
    sb.append("    mazeScoreInHand: ").append(toIndentedString(mazeScoreInHand)).append("\n");
    sb.append("    mazeScoreInBag: ").append(toIndentedString(mazeScoreInBag)).append("\n");
    sb.append("    playerScore: ").append(toIndentedString(playerScore)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

