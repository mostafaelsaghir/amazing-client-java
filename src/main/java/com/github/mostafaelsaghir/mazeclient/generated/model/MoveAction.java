/*
 * A-maze-ing API
 * This document describes the API of the A-maze-ing evening server.    This API consists of three different endpoints, which are detailed below.   - To register yourself as a player use the Player endpoint.   - To get information about the available mazes and enter a specific maze use the Mazes endpoint.   - To navigate a maze use the Maze endpoint.
 *
 * OpenAPI spec version: v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.github.mostafaelsaghir.mazeclient.generated.model;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import lombok.Data;

import java.util.Objects;

/**
 * A tile
 */
@ApiModel(description = "A tile")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-08-12T19:03:45.973+02:00")
@Data
public class MoveAction {
  /**
   * What is the relative direction of this tile.
   */
  public enum DirectionEnum {
    UP("Up"),

    RIGHT("Right"),

    DOWN("Down"),

    LEFT("Left");

    private String value;

    DirectionEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DirectionEnum fromValue(String value) {
      for (DirectionEnum b : DirectionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public DirectionEnum getInverse() {
      switch (this) {
        case UP:
          return DOWN;
        case DOWN:
          return UP;
        case LEFT:
          return RIGHT;
        case RIGHT:
          return LEFT;
        default:
          return this;
      }
    }
  }

  @JsonProperty("direction")
  private DirectionEnum direction = null;

  @JsonProperty("isStart")
  private Boolean isStart = null;

  @JsonProperty("allowsExit")
  private Boolean allowsExit = null;

  @JsonProperty("allowsScoreCollection")
  private Boolean allowsScoreCollection = null;

  @JsonProperty("hasBeenVisited")
  private Boolean hasBeenVisited = null;

  @JsonProperty("rewardOnDestination")
  private Integer rewardOnDestination = null;

  @JsonProperty("tagOnTile")
  private Long tagOnTile = null;

   /**
   * What is the relative direction of this tile.
   * @return direction
  **/
  @ApiModelProperty(value = "What is the relative direction of this tile.")
  public DirectionEnum getDirection() {
    return direction;
  }

   /**
   * Is this the tile where the maze begun.
   * @return isStart
  **/
  @ApiModelProperty(value = "Is this the tile where the maze begun.")
  public Boolean isIsStart() {
    return isStart;
  }

   /**
   * Can you exit the maze on this tile.
   * @return allowsExit
  **/
  @ApiModelProperty(value = "Can you exit the maze on this tile.")
  public Boolean isAllowsExit() {
    return allowsExit;
  }

   /**
   * Does this tile allow for score collection (moving score from your hand to your bag).
   * @return allowsScoreCollection
  **/
  @ApiModelProperty(value = "Does this tile allow for score collection (moving score from your hand to your bag).")
  public Boolean isAllowsScoreCollection() {
    return allowsScoreCollection;
  }

   /**
   * Have you visited this tile before.
   * @return hasBeenVisited
  **/
  @ApiModelProperty(value = "Have you visited this tile before.")
  public Boolean isHasBeenVisited() {
    return hasBeenVisited;
  }

   /**
   * What reward is available on this tile.
   * @return rewardOnDestination
  **/
  @ApiModelProperty(value = "What reward is available on this tile.")
  public Integer getRewardOnDestination() {
    return rewardOnDestination;
  }

   /**
   * The tag on this tile. NOTE: default tag is 0
   * @return tagOnTile
  **/
  @ApiModelProperty(value = "The tag on this tile. NOTE: default tag is 0")
  public Long getTagOnTile() {
    return tagOnTile;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MoveAction moveAction = (MoveAction) o;
    return Objects.equals(this.direction, moveAction.direction) &&
        Objects.equals(this.isStart, moveAction.isStart) &&
        Objects.equals(this.allowsExit, moveAction.allowsExit) &&
        Objects.equals(this.allowsScoreCollection, moveAction.allowsScoreCollection) &&
        Objects.equals(this.hasBeenVisited, moveAction.hasBeenVisited) &&
        Objects.equals(this.rewardOnDestination, moveAction.rewardOnDestination) &&
        Objects.equals(this.tagOnTile, moveAction.tagOnTile);
  }

  @Override
  public int hashCode() {
    return Objects.hash(direction, isStart, allowsExit, allowsScoreCollection, hasBeenVisited, rewardOnDestination, tagOnTile);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MoveAction {\n");

    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("    isStart: ").append(toIndentedString(isStart)).append("\n");
    sb.append("    allowsExit: ").append(toIndentedString(allowsExit)).append("\n");
    sb.append("    allowsScoreCollection: ").append(toIndentedString(allowsScoreCollection)).append("\n");
    sb.append("    hasBeenVisited: ").append(toIndentedString(hasBeenVisited)).append("\n");
    sb.append("    rewardOnDestination: ").append(toIndentedString(rewardOnDestination)).append("\n");
    sb.append("    tagOnTile: ").append(toIndentedString(tagOnTile)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

